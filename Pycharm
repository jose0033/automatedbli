import pandas as pd
from selenium import webdriver
from selenium.webdriver.remote.webelement import WebElement
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import time
from selenium.webdriver.chrome.options import Options
import random
import getpass
import datetime
import numpy

options = Options()
options.add_argument(f"--user-data-dir=C:/Users/{getpass.getuser()}/AppData/Local/Google/Chrome/User Data/Default")
options.add_argument("--profile-directory=Default")
options.headless = False
options.add_argument("--window-size=1920,1080")
options.add_argument('--ignore-certificate-errors')
options.add_argument('--allow-running-insecure-content')
options.add_argument("--disable-extensions")
options.add_argument("--proxy-server='direct://'")
options.add_argument("--proxy-bypass-list=*")
options.add_argument("--start-maximized")
options.add_argument('--disable-gpu/')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--no-sandbox')
options.add_argument("--log-level=3")
options.add_argument('--hide-scrollbars')
options.add_experimental_option("excludeSwitches",["enable-automation"])
options.add_experimental_option("useAutomationExtension",False)

chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument("--incognito")
chromedriver = r"C:\Users\joseph.a.ong\PycharmProjects\chromedriver.exe"
driver = webdriver.Chrome(chromedriver, options=chrome_options)
url = driver.get("https://www.linkedin.com/login?trk=homepage-basic_ispen-sign-in")


limit = 5
connected_urls = dict() # {name: url}
linkedin_login = pd.read_excel('linkedindata.xlsx', usecols="A:C", header=None, index_col=None)
csv_copy = linkedin_login.copy()

#Message details(300 Character Letter)

message ='''Hi, I am a scout for the Tokyo Metropolitan Government(TMG),& I am scouting VC portfolio companies (data-driven) that are seeking to expand to Tokyo  in the areas of Industry 4.0/AI/ML. We provide Free Consulting, Business Partner Matching. Would you like to hear more?'''


message2 = '''Hi, I am a scout for the Tokyo Metropolitan Government(TMG) we are looking for data driven/AI/fintec/Ind4.0/Fintech (Series A+) startups who want to expand to Tokyo. We provide Free Consulting Service, Business Partner Matching. Would you like to hear more?'''
message3 ='''ðŸŒŸ Attention Data-Driven Startups! ðŸš€ Tokyo Metropolitan Government (TMG) Scout here! ðŸ—¼ Expand your horizons to Tokyo with our FREE Consulting Service and Business Partner Matching! We are scouting for AI, ML, and Ind4.0!  industries startups! Do let me know if youre interestedðŸ’¡?'''

message4 = '''I wanted to inform you that Invest Tokyo is hosting a webinar on July 10th, focusing on tech initiatives such as consulting services and subsidies to access the Japanese Market.

Registration: https://us02web.zoom.us/webinar/register/WN_ixoQcEqhTPCWkXva876J3A

Happy to connect too,'''
# # # print("Starting Login Process....")
#
username_login = "joseph96ojj@gmail.com"
password_login = ""
 # #japan account
# username_login = "manaaa1209@gmail.com"
# password_login = "itsmana1209"

#Paris


#london
#


#Tokyo



username_finder = driver.find_element_by_id("username")
username_finder.send_keys(username_login)
password_finder = driver.find_element_by_id('password')
password_finder.send_keys(password_login)


login_button = WebDriverWait(driver, 8).until(EC.element_to_be_clickable((By.XPATH,'//*[@id="organic-div"]/form/div[3]/button')))
time.sleep(3)
login_button.click()
#60 Seconds to configure login details
time.sleep(60)
def sendToPpls(persons):
	global connected_urls, message , message2, message3
	count = 0
	for person in persons:
		try:
			time.sleep(4)
			try:
				connect = person.find_element_by_css_selector('.artdeco-button.artdeco-button--2.artdeco-button--secondary.ember-view.artdeco-button--muted')
				print("connected before etc/Pending/Following buttons ..")
				continue
			except:
				connect = person.find_element_by_css_selector('.artdeco-button.artdeco-button--2.artdeco-button--secondary.ember-view')
				text = connect.find_element_by_css_selector('span').text
				if (text == "Message"):
					print('Already connected')
					continue
				if (text == "Follow"):
					print('Ignoring Follow button ')
					continue
				if (text == "Following"):
					print('Ignoring Following button ')
					continue

			name = person.find_element_by_css_selector('.entity-result__title-line a>span>span').text
			print(f"Engaging to {name}")
			connect.click()
			time.sleep(2) # where the ElementClickInterceptedException is handled

			# read url
			linkedin_url = person.find_element_by_css_selector('.app-aware-link').get_attribute("href")
			print(linkedin_url)
			# addnote = driver.find_element_by_css_selector(
			# 	'.mr1.artdeco-button.artdeco-button--muted.artdeco-button--2.artdeco-button--secondary.ember-view')
			addnote = WebDriverWait(driver, 8).until(EC.element_to_be_clickable((By.CSS_SELECTOR,'.mr1.artdeco-button.artdeco-button--muted.artdeco-button--2.artdeco-button--secondary.ember-view')))
			addnote.click()
			time.sleep(3)
			print('clicked addnote')

			# text = driver.find_element(By.ID, 'custom-message')
			text = WebDriverWait(driver, 8).until(EC.element_to_be_clickable((By.ID,'custom-message')))
			text.click()
			print('clicked space')
			text.send_keys(message2)
			print('sent msg')
			time.sleep(3)
			#
			# send = driver.find_element_by_css_selector(
			# 	'.ml1.artdeco-button.artdeco-button--2.artdeco-button--primary.ember-view')
			send = WebDriverWait(driver, 8).until(EC.element_to_be_clickable((By.CSS_SELECTOR,'.ml1.artdeco-button.artdeco-button--2.artdeco-button--primary.ember-view')))
			send.click()
			print('clicked send')
			return linkedin_url

		except Exception as ex:
			template = "" \
					   " exception of type {0} occurred. Arguments:\n{1!r}"
			print(template.format(type(ex).__name__, ex.args))
			pass

		count += 1

page_counter = 0

for key,value in linkedin_login.iterrows():
	print('key: ',key, 'value: ',value)
	[name, company,] = value.map(lambda x: str(x).replace(' ', '%20'))
	# query = f"https://www.linkedin.com/search/results/all/?keywords={name}%20{company}&origin=TYPEAHEAD_HISTORY&position=0"
	# driver.get(query)
	#xpath navi_old
	# search_finder= WebDriverWait(driver,8).until(EC.element_to_be_clickable((By.XPATH,'//*[@id="global-nav-typeahead"]/input')))

	#second run -> switch to people
	query2 = f"https://www.linkedin.com/search/results/people/?keywords={name}%20{company}&origin=SWITCH_SEARCH_VERTICAL&position=0"
	driver.get(query2)


	time.sleep(3)

	WebDriverWait(driver=driver, timeout=10).until(lambda x: x.execute_script("return document.readyState === 'complete'"))
	WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
	time.sleep(3)
	persons = driver.find_elements_by_css_selector('.reusable-search__result-container')

	#persons = driver.find_element(by=By.CSS_SELECTOR, value="reusable-search__result-container")
	url = sendToPpls(persons)
	connected_urls[name] = url

#saving file to excel
df_new = pd.DataFrame(connected_urls.items())
print(df_new)
df_new.to_csv('done_linkedin_connected_.csv', header=False)











#
# from selenium import webdriver
# from selenium.webdriver.remote.webelement import WebElement
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.common.by import By
# from selenium.webdriver.common.keys import Keys
# import time
# from selenium.webdriver.chrome.options import Options
# import urllib.parse
#
# import random
# import getpass
# import datetime
# import numpy
#
# options = Options()
# # options.add_argument(f"--user-data-dir=C:/Users/{getpass.getuser()}/AppData/Local/Google/Chrome/User Data/Default")
# options.add_argument("--profile-directory=Default")
# options.headless = False
# options.add_argument("--window-size=1920,1080")
# options.add_argument('--ignore-certificate-errors')
# options.add_argument('--allow-running-insecure-content')
# options.add_argument("--disable-extensions")
# options.add_argument("--proxy-server='direct://'")
# options.add_argument("--proxy-bypass-list=*")
# options.add_argument("--start-maximized")
# options.add_argument('--disable-gpu/')
# options.add_argument('--disable-dev-shm-usage')
# options.add_argument('--no-sandbox')
# options.add_argument("--log-level=3")
# options.add_argument('--hide-scrollbars')
# options.add_experimental_option("excludeSwitches", ["enable-automation"])
# options.add_experimental_option("useAutomationExtension", False)
#
# chromedriver = r"C:\Users\joseph.a.ong\PycharmProjects\chromedriver.exe"
# driver = webdriver.Chrome(chromedriver, options=options)
#
# # launch url
# driver.get("https://www.linkedin.com/login?trk=homepage-basic_ispen-sign-in")
#
# messages = ['''Hi, I am scouting for companies (non-Japanese) that are seeking to invest in Tokyo particularly in the areas of Green Finance or Fintech if possible.
# 	Green Finance Subsidy (Access to Tokyo by TMG)( https://www.investtokyo.metro.tokyo.lg.jp/en/for_foreign/green_finance_subsidy/) Could I share more ?
# 	''']
#
# limite = 20
#
# search_words = "production manager"
#
#
# time.sleep(2)
# try:
#     username_finder = driver.find_element_by_id("username")
#     password_finder = driver.find_element_by_id("password")
#     login_button = WebDriverWait(driver, 8).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="organic-div"]/form/div[3]/button')))
#
#     time.sleep(3)
#     username_login = 'joseph96ojj@gmail.com'
#     password_login = '@Anfield96'
#     username_finder.send_keys(username_login)
#     password_finder.send_keys(password_login)
#     time.sleep(3)
#     login_button.click()
# except:
#     print('Already logged in')
#     pass
#
# time.sleep(4)
#
# words = urllib.parse.quote(search_words)
#
# suc_count = 0
#
#
# def println(*args, **kwargs):
#     now = datetime.datetime.now()
#     logT = f'[{now.strftime("%Y-%m-%d %H:%M:%S")}] : '
#     print(logT, *args, **kwargs)
#
#
# def sendToPpls(persons):
#     global suc_count
#     dle = False
#     minn, maxx = 10, 20
#     for person in persons:
#         try:
#             time.sleep(random.randint(minn, maxx))
#             try:
#                 connect = person.find_element_by_css_selector(
#                     '.artdeco-button.artdeco-button--2.artdeco-button--secondary.ember-view.artdeco-button--muted')
#                 minn, maxx = 2, 5
#                 println("en attente")
#                 continue
#             except:
#                 connect = person.find_element_by_css_selector(
#                     '.artdeco-button.artdeco-button--2.artdeco-button--secondary.ember-view')
#                 text = connect.find_element_by_css_selector('span').text
#                 if (text == "Message"):
#                     minn, maxx = 1, 2
#                     println('Already connected')
#                     continue
#                 minn, maxx = 10, 20
#                 suc_count = suc_count + 1
#             name = person.find_element_by_css_selector('.entity-result__title-line a>span>span').text
#             println(f"Num : {suc_count}, Sending to {name}")
#             connect.click()
#             time.sleep(2)
#             addnote = driver.find_element_by_css_selector(
#                 '.mr1.artdeco-button.artdeco-button--muted.artdeco-button--2.artdeco-button--secondary.ember-view')
#             addnote.click()
#             time.sleep(2)
#             text = driver.find_element_by_css_selector('[name="message"]')
#             message = random.choice(messages)
#             text.send_keys(message)
#             time.sleep(2)
#             send = driver.find_element_by_css_selector(
#                 '.ml1.artdeco-button.artdeco-button--2.artdeco-button--primary.ember-view')
#             send.click()
#         except Exception as ex:
#             template = "An exception of type {0} occurred. Arguments:\n{1!r}"
#             message = template.format(type(ex).__name__, ex.args)
#             print(message)
#             pass
#     if suc_count > limite:
#         suc_count = 0
#         dle = True
#     nextPage(dle)
#
#
# def people_page(driver):  ##coords and dimensions to scroll through page
#     container = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
#     containerLoc = container.location
#     containerSize = container.size
#     startY = containerLoc["y"]
#     height = containerSize["height"]
#
#     return startY, height
#
#
# counter = 0
#
#
# def nextPage(dle=False):
#     if dle == True:
#         one_hour = 3600
#         delay_time = one_hour * random.randint(2, 8) / 10
#         time.sleep(delay_time)
#     global counter
#     counter = counter + 1
#     query = f"https://www.linkedin.com/search/results/people/?keywords={words}&page={counter}&origin=CLUSTER_EXPANSION"
#     driver.get(query)
#
#     WebDriverWait(driver=driver, timeout=10).until(
#         lambda x: x.execute_script("return document.readyState === 'complete'"))
#     # driver.execute_script("window.scrollTo(0,document.body.scrollHeight)")
#     # time.sleep(3)
#     startY, height = people_page(driver)
#     step = (height - startY) * 0.01
#     for l in numpy.arange(startY, height, step):  ##slow scroll through product page
#         driver.execute_script("window.scrollTo(0, {});".format(l))
#     time.sleep(3)
#     persons = driver.find_elements_by_css_selector('.reusable-search__result-container')
#     time.sleep(random.randint(5, 10))
#     sendToPpls(persons)
#
#
# nextPage()
